diff --git a/src/starkware/starknet/business_logic/execution/execute_entry_point.py b/src/starkware/starknet/business_logic/execution/execute_entry_point.py
index 09dfd89..3ae7c9a 100644
--- a/src/starkware/starknet/business_logic/execution/execute_entry_point.py
+++ b/src/starkware/starknet/business_logic/execution/execute_entry_point.py
@@ -9,6 +9,8 @@ from starkware.cairo.lang.vm.relocatable import RelocatableValue
 from starkware.cairo.lang.vm.security import SecurityError
 from starkware.cairo.lang.vm.utils import ResourcesError
 from starkware.cairo.lang.vm.vm_exceptions import HintException, VmException, VmExceptionBase
+from starkware.cairo.lang.vm.cairo_run import write_binary_memory, write_binary_trace
+import math
 from starkware.python.utils import to_bytes
 from starkware.starknet.business_logic.execution.execute_entry_point_base import (
     ExecuteEntryPointBase,
@@ -45,8 +47,9 @@ from starkware.starkware_utils.error_handling import (
 
 logger = logging.getLogger(__name__)
 
-FAULTY_CLASS_HASH = to_bytes(0x1A7820094FEAF82D53F53F214B81292D717E7BB9A92BB2488092CD306F3993F)
+call_number = 0
 
+FAULTY_CLASS_HASH = to_bytes(0x1A7820094FEAF82D53F53F214B81292D717E7BB9A92BB2488092CD306F3993F)
 
 class ExecuteEntryPoint(ExecuteEntryPointBase):
     """
@@ -174,6 +177,7 @@ class ExecuteEntryPoint(ExecuteEntryPointBase):
         Returns the corresponding CairoFunctionRunner and BusinessLogicSysCallHandler in order to
         retrieve the execution information.
         """
+        global call_number
         # Prepare input for Cairo function runner.
         class_hash = self._get_code_class_hash(state=state)
 
@@ -284,6 +288,13 @@ class ExecuteEntryPoint(ExecuteEntryPointBase):
         assert isinstance(args_ptr, RelocatableValue)  # Downcast.
         runner.mark_as_accessed(address=args_ptr, size=len(entry_points_args))
 
+        memory_file = open("memory_files/execute_entry_point_{}.memory".format(call_number), "wb")
+        trace_file = open("trace_files/execute_entry_point_{}.trace".format(call_number), "wb")
+        field_bytes = math.ceil(contract_class.program.prime.bit_length() / 8)
+        runner.relocate()
+        write_binary_memory(memory_file, runner.relocated_memory, field_bytes)
+        write_binary_trace(trace_file, runner.relocated_trace)
+        call_number += 1
         return runner, syscall_handler
 
     def _get_selected_entry_point(
diff --git a/src/starkware/starknet/cli/starknet_cli.py b/src/starkware/starknet/cli/starknet_cli.py
index ddca7c6..fbd4e89 100755
--- a/src/starkware/starknet/cli/starknet_cli.py
+++ b/src/starkware/starknet/cli/starknet_cli.py
@@ -60,6 +60,8 @@ from starkware.starknet.wallets.account import DEFAULT_ACCOUNT_DIR, Account
 from starkware.starknet.wallets.starknet_context import StarknetContext
 from starkware.starkware_utils.error_handling import StarkErrorCode
 
+custom_salt = 0
+
 NETWORKS = {
     "alpha-goerli": "alpha4.starknet.io",
     "alpha-goerli2": "alpha4-2.starknet.io",
@@ -839,12 +841,14 @@ def parse_hex_arg(arg: str, arg_name: str) -> int:
 
 
 def get_salt(salt: Optional[str]) -> int:
+    global custom_salt
+    custom_salt +=1
     """
     Validates the given salt and returns it as an integer.
     If salt is None, returns a random salt.
     """
     if salt is None:
-        return fields.ContractAddressSalt.get_random_value()
+        return custom_salt
 
     return parse_hex_arg(arg=salt, arg_name="salt")
 
diff --git a/src/starkware/starknet/core/os/class_hash.py b/src/starkware/starknet/core/os/class_hash.py
index 132fb21..46bd820 100644
--- a/src/starkware/starknet/core/os/class_hash.py
+++ b/src/starkware/starknet/core/os/class_hash.py
@@ -3,9 +3,11 @@ import dataclasses
 import itertools
 import json
 import os
+import math
 from contextvars import ContextVar
 from functools import lru_cache
 from typing import Callable, List, Optional
+from starkware.cairo.lang.vm.cairo_run import write_binary_memory, write_binary_trace
 
 import cachetools
 
@@ -26,6 +28,8 @@ from starkware.starknet.services.api.contract_class import ContractClass, EntryP
 
 CAIRO_FILE = os.path.join(os.path.dirname(__file__), "contracts.cairo")
 
+call_number = 0
+
 class_hash_cache_ctx_var: ContextVar[Optional[cachetools.LRUCache]] = ContextVar(
     "class_hash_cache", default=None
 )
@@ -73,6 +77,7 @@ def compute_class_hash(
 def compute_class_hash_inner(
     contract_class: ContractClass, hash_func: Callable[[int, int], int]
 ) -> int:
+    global call_number
     program = load_program()
     contract_class_struct = get_contract_class_struct(
         identifiers=program.identifiers, contract_class=contract_class
@@ -93,6 +98,15 @@ def compute_class_hash_inner(
         verify_secure=False,
     )
     _, class_hash = runner.get_return_values(2)
+
+    memory_file = open("memory_files/class_hash_{}.memory".format(call_number), "wb")
+    trace_file = open("trace_files/class_hash_{}.trace".format(call_number), "wb")
+    field_bytes = math.ceil(program.prime.bit_length() / 8)
+    runner.relocate()
+    write_binary_memory(memory_file, runner.relocated_memory, field_bytes)
+    write_binary_trace(trace_file, runner.relocated_trace)
+    call_number += 1
+
     return class_hash
 
 
